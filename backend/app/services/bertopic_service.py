import logging
from pathlib import Path
from bertopic import BERTopic

# Global variable for the BERTopic model
bertopic_model = None

def load_bertopic_model():
    """
    Loads the BERTopic model from the specified directory.

    Returns:
        BERTopic: The loaded BERTopic model.
    """
    global bertopic_model

    # Build the path to the BERTopic model directory
    model_dir = Path('app') / 'trained-models' / 'bertopic_model'

    # Convert to absolute path and ensure it exists
    model_dir = model_dir.resolve()

    if not model_dir.exists():
        raise FileNotFoundError(f"BERTopic model directory not found at: {model_dir}")

    print(f"[DEBUG] Loading BERTopic model from: {model_dir}")

    try:
        # Load the BERTopic model
        bertopic_model = BERTopic.load(str(model_dir))
        print("[DEBUG] BERTopic model loaded successfully.")

    except Exception as e:
        print(f"[ERROR] Failed to load BERTopic model: {str(e)}")
        raise

def get_topics(embeddings):
    """
    Generates topics using the locally loaded BERTopic model.

    Args:
        embeddings (list): The input embeddings for topic modeling.

    Returns:
        list: A list of topics generated by the BERTopic model.
    """
    try:
        if not embeddings or len(embeddings) == 0:
            print("[WARNING] No embeddings provided. Returning an empty list.")
            return []

        # Ensure the BERTopic model is loaded
        if bertopic_model is None:
            load_bertopic_model()

        # Generate topics using the BERTopic model
        topics, _ = bertopic_model.transform(embeddings)

        return topics

    except Exception as e:
        print(f"[ERROR] Error in get_topics: {e}")
        raise

""" if __name__ == "__main__":
    try:
        # Standalone test for the BERTopic model
        test_embeddings = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]
        load_bertopic_model()
        topics = get_topics(test_embeddings)
        print("[DEBUG] Topics generated successfully.")
        print(topics)
    except FileNotFoundError as e:
        print(f"[ERROR] {e}")
    except Exception as e:
        print(f"[ERROR] An unexpected error occurred: {e}") """